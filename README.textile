h1. ActsAsEventOwner

ActsAsEventOwner is an ActiveRecord extension that adds calendar event management to any ActiveRecord model. Models that 
declare themselves as @acts_as_event_owner@ gain two @has_many@ associations- one for the event specifications, 
and one for the event occurrences.  

ActsAsEventOwner supports recurring events, with roughly the same recurrence rule capabilities as Apple's iCal
application. Under the hood, ActsAsEventOwner uses "ri_cal":http://github.com/rubyredrick/ri_cal to provide
recurring event support.

h1. Installation

h2. Rails 2.3.x

ActsAsEventOwner is available both as a gem and as a plugin. 

h3. Installing as a Rails 2.3.x plugin

To install as a plugin, just do

<pre>
  script/plugin install git://github.com/dburkes/acts_as_event_owner_.git
</pre>

You'll also need to install the @ri_cal@ gem by the method of your choice (bundler, system gems, etc).

h3. Installing as a Rails 2.3.x gem

To install as a gem, use your preferred method of gem installation, _e.g._ Bundler, @config.gem@, etc.

If you want to use the acts_as_event_owner rake tasks, put the following line in your Rakefile:

<pre>
  Dir["#{Gem.searcher.find('acts_as_event_owner').full_gem_path}/**/tasks/*.rake"].each { |ext| load ext }
</pre>

h3. Rails 2.3.x post-installation steps

After installation, generate a migration to add ActsAsEventOwner tables to your database:

<pre>
  script/generate acts_as_event_owner_migration
  rake db:migrate
</pre>

h2. Rails 3.0

Just add it to your Gemfile, like so:

<pre>
  gem 'acts_as_event_owner'
</pre>

Then do:

<pre>
  bundle install
  rails generate acts_as_event_owner:migration
  rake db:migrate
</pre>

h2. Usage

<pre>
  class User < ActiveRecord::Base
    acts_as_event_owner
  end
  
  @user = User.create :name => 'Alvin Seville'
  @user.event_specifications.create :description => 'acquire cheese balls', 
    :start_at => Date.today.to_time.utc, 
    :repeat => :daily,
    :generate => false
  
  @user.events # => []
  
  @user.events.generate :from => Date.today.to_time.utc, :to => Date.today.to_time.utc + 1.week
  
  @user.events # => (7 ActsAsEventOwner::EventOccurrence objects)
</pre>

h2. Recurrence rules

ActsAsEventOwner supports recurrence rules roughly equivalent to those supported by Apple's iCal application. Examples are:

h3. One-time event

<pre>
  EventSpecification.create :description => 'pick up laundry', 
    :start_at => Time.parse("4:00pm")
</pre>

h3. Every day

<pre>
  EventSpecification.create :description => 'eat breakfast', 
    :start_at => Time.parse("7:30am"), 
    :repeat => :daily
</pre>

h3. Every three days

<pre>
  EventSpecification.create :description => 'call mom', 
    :start_at => Time.parse("10:30am"), 
    :repeat => :daily, 
    :frequency => 3
</pre>

h3. On Monday, Wednesday, and Friday of each week

<pre>
  EventSpecification.create :description => 'go to the gym', 
    :start_at => Time.parse("6:30am"), 
    :repeat => :weekly, 
    :on => [ :mo, :we, :fr ]
</pre>

h3. On Thursday, every other week

<pre>
  EventSpecification.create :description => 'clean the bathroom', 
    :start_at => Time.parse("8:00pm"), 
    :repeat => :weekly, 
    :frequency => 2, :on => [ :th ]
</pre>

h3. On the 10th and 25th of each month

<pre>
  EventSpecification.create :description => 'pick up paycheck', 
    :start_at => Time.parse("9:30am"), 
    :repeat => :monthly, 
    :on => [ 10, 25 ]
</pre>

h3. On the last Saturday of each month

<pre>
  EventSpecification.create :description => 'run a marathon', 
    :start_at => Time.parse("6:30am"), 
    :repeat => :monthly, 
    :on_the => :last, 
    :target => [ :sa ]
</pre>

h3. On the last weekday of each month

<pre>
  EventSpecification.create :description => 'wine tasting', 
    :start_at => Time.parse("6:30pm"), 
    :repeat => :monthly, 
    :on_the => :last, 
    :target => :wkday
</pre>

h3. Every April 15th

<pre>
  EventSpecification.create :description => 'pay taxes', 
    :start_at => Time.parse("4/15/2010 5:00pm"), 
    :repeat => :yearly
</pre>

h3. On the second Thursday in May, every other year, until Dec 31, 2012

<pre>
  EventSpecification.create :description => 'freak out', 
    :start_at => Time.now.utc, 
    :repeat => :yearly, 
    :frequency => 2, 
    :on => [ 5 ], 
    :on_the => :second, 
    :target => [ :th ], 
    :until => Time.parse("12/31/2012")
</pre>
